Python 3.0 -


> Some Basics :-

# Comment

"""
 Docstrings Python Comment
"""

Ex-
def intro():
    """ 
    This function prints Hello Joseph
    """
    print("Hello Joseph")
    
intro.__doc__  


# Escape Sequence :
print(" Hello! \"TIX\" ")


---


> Primitive Data Types :-

python doesnt need to mention datatype unlike most lang
data value can be

1) int, float, complex
2) boolean : True , False
3) absence of value : None


---


> Type Conversion :-

int(12.5) //convert to integer explicitly
float(12) //convert to float explicitly

Note : Always convert input to int/float when necessory


---


> Operator :-

arithmetic : +,-,*,/,%
n // n : truncated division, remove decimal
n ** n : power

comparison operator: == != < <= > >=
logical operator: and , or , not
bitwise operator: &, |, ~, ^, <<, >>
membership operator: in , not in
identity operator: is , is not

Ex-
4 is int // returns true

fruit = "apple"
"a" in fruit // returns true
if "app" in fruit :
    print("True")
    
    
---


> Strings :-

str="Python"
print("Hello"+"World") // string concatenation
print("Hello"*2) // repeat string twice
indexing : x = str[0] // x = "P"
length : x = len(str) // x = 6
slicing : x = str[0:3] // x = "Pyt"
slicing : x = str[:4] // x = "Pyth"
slicing : x = str[5:] // x = "on"

*Looping through string :
fruit="Apple"
for x in fruit
    print(x) # A p p l e
    
-Built-in String Library Funntions :
str = "Python"
str.capitalize() // Python
str.lower() // python
str.upper() // PYTHON
str.title() // PythonProg
str.replace("Python","Java")

str = "  Python is love  "
str.lstrip() // strips whitespaces from left
str.rstrip() // strips whitespaces from right
str.strip() // strips whitespaces from left & right
str.startswith("Py") // returns true of string starts with Py
str.endswith("Py") // returns true of string ends with Py
str.find("is") // returns index position if found here 9

Note: it doesnt modify string but returns new string

str.isalnum() //returns true if alpha-numeric
str.isalpha() // returns true if alpha
str.isdecimal() // returns true if all decimal
str.isdigit() // returns true if all digits
str.isnumeric() // returns true if all numeric
str.islower() // returns true if lower
str.isupper() // returns true if upper



--------


# Array :-
Note : import array

// define array -
arr = array.array('type_code',[v1,v2,vn])
type code | data type
i signed int
I unsigned int
f signer float
F unsigned float
d double
h signed short
H unsigned short
b signed char
B unsigned char
u unicode char

Ex-
num = array.array('i',[2,4,8,10])

// Length -
len(num)

// Indexing / Searching -
first = num[0]
last = num[-1] (-ve indexing)

// Insertion -
num[0] = 12
num[1:4] = array.array('i',[4,6,8])  (1-3)

// Removing -
del num[2]

// Concat -
num = a + b


---


=> Derived Data Types :-

> Lists :
lists are same as array but it can contain different type of data
mutable ordered sliced indexed(-ve rl)
concatenated repeatedly membership iteration

list=["py", 10, 'x',]
list[2]='m' // assigning
list[0:2]=["PY", 100] // assign multiple
// Python List Comprehension -
letters = [ letter for letter in 'Python' ]

list = ["John", "David", "James", "Jonathan"]
for i in list :
    print(i)
    
len(list) //return length
list.append(element) //Add element at end
list.remove(element) //Remove element from list
cmp(l1,l2) //returns true if l1>l2 else false
max(list) //Return max
min(list) //Return min
list(sequence) //return convert sequence to list


> Tuples :
tuples are same as lists but it can't be modify (read-only)
immutable sliced indexed(-ve rl)
concatenated repeated membership iterable

tuple=(10, "py", 'x')
tuple[1]="PY"

len(tuple) //returns length
cmp(t1,t2) //returns true if t1>t2 else false
max(list) //returns max
min(list) //returns min
tuple(sequence) //return convert sequence to tuple


> Sets :q
Set is unordered collection of unique & different data type.
mutable unordered unique elements
iterable
Note: can't contain mutable element

set1 = {'James', 2, 3,'Python'} 

set2 = set() //create using built-in function
set2.add(10) //Adding element to set
set2.update(["mon","tue","wed","thu"])
set2.discard(5) //remove element, no error if not exist
set2.remove(2) //removing element from set, error if not exist
set2.clear() //clear all items from set

union of set: print(set1|set2) or set1.union(set2)
intersection of set: print(set1&set2) or set1.intersection(set2)
difference in set: print(set1-set2) or set1.difference(set2)
symmetric difference in sets: print(set1^set2) or set1.symmetric_difference(set2)

# Frozensets :
frozen sets are immutable form of normal sets ie items of frozen set cannot be changed
and therefore it can be used as key in dictionary.


> Dictionary :
mutable, unordered set of key-value pair of items.
Key can hold any primitive data type (immutable), whereas value is arbitrary Python object (mutable).
iterable (key is iterator)

dict = {"Name": "Tom", "Age": 22}

name = d["Name"] // returns value at key
d.keys() // Returns all keys 
d.values() // Retuens all values
d["Sex": "Male"] // Adding data to dictionary
del d["Age"] //Deleting data
dict.pop(key) //remove & return value at key
len(dict) //returns length of dict
str(dict) //convert dictionry into 
dict.clear() //clear dictionary
dict.copy() //returns shallow copy of dictionary
dict.has_key(key) //return true if key exists
dict.update(dict2) //adds dict2 to dict


---


> Conditional Statements :-

if condition :
    statements

if condition :
    statement
else :
    statement
    
if condition : 
    statement
elif condition :
    statement 
    
if condition : 
    statement
elif condition :
    statement
else condition :
    statement
    
    
---


> Loops :-

(1) while -
while condition :
    statement
    
while i<5 :
    if i==0 :
        continue
    if i==3 :
        break
    print("Pas")
    
# else with While Loop -
while (i<=5) :
    print(i)    
    i=i+1
else :
    print("terminated")
    
(2) do-while -
do :

(3) for -
for iterator in sequence :
    statements
    
Ex-
for i in [1, 2, 3, 4, 5]
    print(i)
    
friends = ["TG", "MP", "NM"]
for friend in friends :
    print("Hello",friend)
    
# For Loop using range function -
for i in range(10):
    if (i==5):
        # pass keyword is used to execute nothing/empty block, add code lator
        pass
    print(i)
    
list = ['Peter','Joseph','Ricky','Devansh']
for i in range(len(list)) :
    print("Hello",list[i])
    
# else Statement with For loop -
for i in range(0,5):
    print(i)    
else:
    print("terminated")
    
    
# Loop + Condition :
while True:
    line = input('> ')
    if line [0] == '#' :
        continue
    if line == 'done' :
        break
    print(line)
print('Done!')


---


> Functions :

def function_name():
    statements
    
# Call Function -
function_name()


# function with parameter/arguments-
def greet(name) :
    print("Hello",name)
    
greet("TIX")


# function returning value-
def square(x) :
    return int(x)*int(x)
    
print( square(2) )


# Default Argument -
def add(a=5,b=10):
    return a+b
    
print( add(a=10) )
print( add(a=10,b=15) )


# Variable Length Arguments (*args) :
its variable length arguments internally treated as tuples.

def vararg(*name) :
    //name is treated as tuple:
    print(type(name))
    for i in name :
        print(i)
        
vararg("imperial","tix","x")


# Keyword Arguments -

def greet(a,b,c) :
    print("Hello",a,b,c)
    
greet(a="TIX", c="X", b="name")



# Built-in Functions :

print("some text ")
print(100)
print("Entered",x)
input() //input and return as string
input("Enter : ") //prompt input & returns input string
exit()
quit()
type(object) // print type of object
isinstance(object,type) //returns true if value if of type Ex- isinstance(1+2j,complex)=true
int(string) //returns integer from string/no
float(string) //returns float from string/no
complex(string) //convert string to complex no
str(value) //convert to string
len(object) //returns length of object
abs(no) //returns obsolute no (+ve)
pow(base,power) //returns based raised to power
round(float) //rounds of to nearest int
bin(no) //return binary of no
min(11,22,45.6,34) //returns smallest of collection
max("hello world") // returns maximum, here w
sorted("python") //sort in ascending order
reversed("java") //returns reverse ordered set
range(sequence) //returns no sequence starting from 0 incremented by 1
sum(iterable_object) //returns sum of iterablevEx- print( sum([5,3,2]) )
eval(expression) //parses expression & returns result
hash(value) //returns hash value using hash algorithm
hex(no) //return hex of no
id(object) //returns unique id of object
help() //open python helper
issubclass(subclass,class) //returns true if arg1 is subclass of arg2
list([1,2,3,4]) //returns list
dict(a=1,b=2) //returns dictionary
tuple([1,2,3,4]) or tuple("python") //returns tuple of object
format(value,"d/f/b")
where: d=int,f=float,b=binary

compile("code","file","exec") //returns object from source code
exec(object)
Ex-
c=compile("print("Hi")","a.py","exec")
exec(c)

exec("print("Hello")")



# Lamba Function :
it is anonynous function that is without name in single statement.
lamba args : expression

Ex-
pw = lambda a : a*a
print(pw(2)) // 4

add = lambda a,b : a+b
print( add(2,4) )

# lambda function with filter() -
// Print odd int in list
lst = (10,22,37,41,100,123,29)  
oddlist = tuple(filter(lambda x:(x%2 != 0),lst))   
print(oddlist)


---------


> File Handling :-
open file > read/write > close file

# Open File -
file_handler = open("file_name","mode")

# Close File -
file_handler.close()

# Create New File - with open() :-
file_ptr = open("file.txt","file_mode")

File Modes : x , a , w
x : create new, error if exists
a : create new, appends content if already exists
w : create new, overwrite content of already exist

Ex-
xfile = open("file.txt")
for line in xfile :
    print(line)
xfile.close

fhandle = open("file.txt")
inp = fhandle.read() // read whole file into single string.
print(len(inp)) //print length of string

# writing to file -
fhand = open("file.txt","a")
fhand.write("this is python")
fhand.close()

# reading from file -
fhand = open("file.txt","a")
content = fhand.read() //returns complete content
content = fhand.read(10) // returns 10 bytes data
fhand.close()

fhandle = open("file.txt")
for line in fhand :
    line=line.rstrip() //Strips whitespaces from right (also \n)
    if line.startswith("From") :
        print(line)
        
fhandle = open("file.txt")
for line in fhand :
    line=line.rstrip()
    if not line.startswith("From") :
        continue
    print(line)
    
fname = input("Enter File Name : ")
fhand = open("fname")
c = 0
for line in fhand :
    if line.startswith("From") :
        c = c + 1
print("Lines Count with From = ",c)

fname = input("Enter File Name : ")
try :
    fhand = open("fname")
except :
    print("File Not Exists!")
    quit()

# Read by line - readline() : read no of line by no of call
// open file.txt in read mode, causes error if no such file exists.
fileptr = open("file2.txt","r")
// stores all the data of the file into the variable content    
content = fileptr.readline()     
content1 = fileptr.readline()  
// prints content of file 
print(content)     
print(content1)  
// closes the opened file    
fileptr.close()

# Read by line - readlines() : read all lines till EOF
// open file.txt in read mode, causes error if no such file exists
fileptr = open("file2.txt","r")
// stores all data of file into variable content    
content = fileptr.readlines()
// prints content of file
print(content)
// closes the opened file     
fileptr.close()

# File Pointer Positon tell() :
fileptr = open("file.txt","r")
print("Position=", fileptr.tell())  // 0
content = fileptr.read()
print("Position=", fileptr.tell())  // 87

# Modify File Pointer Position seek() :
fileptr = open("file.txt","r")
print("Position=", fileptr.tell())  // 0
fileptr.seek(10)
print("Position=", fileptr.tell())  // 10


-----------


# Python OS Module :-
Note: import os

// Rename File :
os.rename("old_name","new_name")

// Deleting File :
os.remove("file")

// Creating New Directory :
os.mkdir("dir_name")

// Get Current Working Directory :
os.getcwd()

// Change Current Working Directory :
os.chdir("new_dir")

// Deleting Directory :
os.rmdir("dir_name")

// Open & Close File :
fr = os.popen("file.txt",'w')
os.close(fr)


# Writing Python output to file :-
import subprocess

with open("output.txt", "wb") as f:
  subprocess.check_call(["python", "file.py"], stdout=f)

  
------------

# Modules & Packages :-

// import module -
import module_name

// from-import : import particular method from module -
from module_name import method_name

// import module with custom name -
import module_name as

// dir() : return sorted list of all modules

// reload(module_name) : reload module

// package -
to make dir pkg create file with name "_init_.py" inside dir
pkg also contain sub-pkgs
to use modules these must be imported.

- Package
   |- _init_.py
   |
   |- modulr.py
   |
   |- SubPackage
   |   |- _init_.py
   |   |- module.py
   |
   |- SubPackage
       |- _init_.py
       |- module.py

Example :
import SubPackage

some code


---


> Exception Handling :

// try-except -
try :
    statements may leads error
except :
    statements if error

// try-except with else -    
try :
    statements may leads error
except :
    statements if error
else :
    statements if no error
    
// try-except with defined exceptions -
try :
    statements may leads error
except IOError :
    statements if IOError occured

// try-except with multiple exceptions -
try :
    statements may leads error
except Exception1 :
    statements if IOError occured
except Exception2 :
    statements if IOError occured
    
try :
    statements may leads error
except(ArithmeticError, IOError) :
    print("Exception Occured")

// try-except with exception variable -
try :
    statements may leads error
except Exception as E :
    statements if error
    print(E)
    
// try-finally -
try :
    statements may leads error
except :
    statements if IOError occured
finally :
    always run

try :
    statements cause error
except :
    statements if error
else :
    statements if no error
finaly :
    statements always run

// raisig exception -
try :
    statements
    raise ValueError
except ValueError :
    print("Invalid Value")
    
// raise exception with message -
try :
    statements
    raise ValueError("Number Is Negative")
except ValueError as E :
    print(E)
    
// Custom Exceptions -


---------


# Python Date & Time :-
Note : Import class before using.
We can also compare data,time

// time class -
time.time() : return no of tick since 12 AM 1 January 1970
time.localtime(time.time()) : return time tuple
time.asctime(time.localtime(time.time()))) : formatted time
time.sleep(n) : stop execution for n second

// datetime class -
datetime.datetime.now() : return current date and time
datetime.datetime(2020,04,04) : return passed date
datetime.datetime(2020,4,4,1,26,40) : return passed date and time
Note : format - year, month, day, hour, minute, millisecond

datetime.datetime.now().year : current year
datetime.datetime.now().month : current month
datetime.datetime.now().day : current day
datetime.datetime.now().hour : current hour
datetime.datetime.now().minute : current minute
datetime.datetime.now().second : current second

// calendar class -
calendar.month(2020,3) : return calendar
calendar.prcal(n) : return calendar of n year


---------


# Python Regex :-


---------


# Python Assertion (assert keyword) :-
it is used for testing/debugging/checking condition.
it is boolean expression if its true execution continue,
if false then throw assertion error.

assert condition , "error message (optional)"

// Example -
def avg(scores):
    assert len(scores) != 0,"The List is empty."
    return sum(scores)/len(scores)    
    
scores2 = [67,59,86,75,92]    
print("The Average of scores2:",avg(scores2))    
    
scores1 = []    
print("The Average of scores1:",avg(scores1))    

// Output -
The Average of scores2: 75.8
AssertionError: The List is empty.


-----------


# Python Maths Module :-
Note : import math

math.log(x) : returns natural log
math.log(x,y) : log of x to base y
math.log10(x) : returns common log
math.exp(x) : returns exponential power
math.pow(x,y) : return x raised to y
math.floor(x) : round down to <= x
math.ceil(x) : round up to >= x
math.fabs(x) : returns absolute value of x
math.factorial(x) : returns factorial of x
math.modf(x) : returns fractional and integer parts of x


----------------


# Python random module :-
Note : import random

random.random() : return random float
random.randint(x,y) : return int bet x to y
random.choice([12,45,77,15,5]) : return random from choice
random.shuffle(list) : shuffle list
random.randrange(beg,end,step) : return random no bet beg-end by step diff
random.seed(value) : for producing true random nos

Note : random no are actually pseudo nos.
random no are generated for some value called seed value.
Default seed value is system time.
For same seed value, exactly same random nos are generated.


----------------

# Python statistics Module :-
Note : import statistics

statistics.mean(list) : return mean of numeric data list
statistics.median(list) : return median (middle value of) numeric data list
statistics.mode(list) : return mode (most common data) from list
statistics.stdev(list) : return standard deviation from list


-----------


# Python sys module :-
Note : import sys

sys.modules : return name of modules which have been imported
sys.argv : return list of CL arguments passed to python script (index 0 is script name)
sys.path : return PYTHONPATH set in the current (it is environment variable)
sys.executable : value of this function is absolute path to python interpreter
sys.platform : return current platform of python working
sys.exit : exit from current execution (script/cli)

Ex: >> python code.py arg2 arg3
>> sys.argv
['code.py','arg1','arg2']


-----------


# Python Decorators :-

// Reference to function -
def add(a,b):
  print(a+b)
  
add(2,3)
add2=add
add2(4,5)


// Inner Function -
def disp():
  print("This Is disp() Function")
  def show():
    print("This Is show() function")
  def show2():
    print("This Is show2() function") 
  show()
  show2()
  
disp()  


// Function As Parameter -
import sys

def square(n):
    return n*n                            
def disp(func,x):
    temp=func(x)
    return temp
    
a=int(sys.argv[1])
print(disp(square,a))


// Returning Function -
def greet():
  def hello():
    print("Hello There")
  return hello

func=greet()
func()


// Decorating functions with parameters -
def divide(x,y):
    return x/y
def outer_div(func):
    def inner(x,y):
        if(x<y):                                        x,y = y,x
        return func(x,y)
    return inner
divide1 = outer_div(divide)

a=int(input("Enter int : "))
b=int(input("Enter int : "))
print("Div=",divide1(a,b))


// Syntactic Decorator (Pie Syntax) -
def outer_div(func):
    def inner(x,y):
        if(x<y):
            x,y = y,x
        return func(x,y)
    return inner
# Syntax Of Generator -
@outer_div
def divide(x,y):
    print(x/y)

divide(8,2)


// Reusing Decorator -
# syntactic_dec.py
def do_twice(func):
    def wrapper_do_twice():
        func()
        func()
    return wrapper_do_twice

# program.py
from syntactic_dec import do_twice
@do_twice
def say_hello():
    print("Hello There")
say_hello()


// Decorator with Arguments -
# syntactic_dec.py
def do_twice(func):
    def wrapper_function(*args,**kwargs):
        func(*args,**kwargs)
        func(*args,**kwargs)
    return wrapper_function
    
# program.py
from syntactic_dec import do_twice
@do_twice
def display(name):
    print(f"Hello {name}")
display("John")


// Returning Values from Decorated Functions -


---------


# Python Generators :-
Generators are function which return(yields) onre or more object
and used to create iterators.
It is normal function but uses yield keyword instead of return.

def simple():
for i in range(10):
    if(i%2==0):
         yield i
         
#Successive Function call using for loop
for i in simple():
    print(i)
    

// Yielding multiple values -
def multiple_yield():  
    str1 = "First String"  
    yield str1  
  
    str2 = "Second string"  
    yield str2  
  
    str3 = "Third String"  
    yield str3
    
obj = multiple_yield()  
print(next(obj))  
print(next(obj))  
print(next(obj))

Output:
First String
Second string
Third String


// table of given number using generator -
def table(n):
    for i in range(1,11):  
        yield n*i  
           i = i+1
           
for i in table(15):
    print(i)

Output:
15
30
45
60
75
90
105
120
135
150


-----------


## OOP :-

// Creating class -
class Employee:
    id = 10
    name = "John"
    
    def display (self):
        print("ID: %d \nName: %s"%(self.id,self.name))
// Creating emp object/instance of Employee class -
emp = Employee()
emp.display()

// deleting properties of class -
del emp.id
del emp.display()

// deleting object -
del emp


# Constructors :-
class Employee:
    # Constructor -
    def __init__(self, name, id):
        self.id = id
        self.name = name                      
    def display(self):
        print("ID: %d \nName: %s" % (self.id, self.name))

# Creating Object -
emp1 = Employee("John", 101)

# Calling Method -
emp1.display()


// Counting objects using constructor -
class Student:
    count = 0
    def __init__(self):
        Student.count = Student.count + 1
        
s1=Student()
s2=Student()    
s3=Student()
print("The number of students:",Student.count)

OUTPUT -
The number of students: 3

NOTE: Python doesnt allow constructor overloading.


# Python Built-in Class Methods & Properties :-

getattr(obj,name,default) : used to access attribute of object
setattr(obj, name,value) : used to set particular value to specific attribute of object
delattr(obj, name) : used to delete specific attribute
hasattr(obj, name) : returns true if object contains some specific attribute

\\ Example :

class Student:  
    def __init__(self, name, id, age):  
        self.name = name  
        self.id = id  
        self.age = age  
        
s = Student("John", 101, 22)  
  
# prints attribute name of object s - 
print(getattr(s, 'name'))
  
# reset value of attribute age to 23 -
setattr(s, "age", 23)
  
# prints true if student contains attribute with name id -
print(hasattr(s, 'id'))

# deletes attribute age - 
delattr(s, 'age')  

OUTPUT:
John
23
True

-

__dict__ : it provides dictionary containing information about class namespace
__doc__ : it contains string which has class documentation
__name__ : it is used to access class name
__module__ : it is used to access module in which, this class is defined
__bases__ : it contains tuple including all base classes

\\ Example -
class Student:
    def __init__(self,name,id,age):
        self.name = name
        self.id = id
        self.age = age
    def display_details(self):
        print("Name:%s, ID:%d, age:%d"%(self.name,self.id))
s = Student("John",101,22)

print(s.__doc__)    
print(s.__dict__)    
print(s.__module__)

OUTPUT :
None
{'name': 'John', 'id': 101, 'age': 22}
__main__


--------------

# Inheritance :-

\\ Syntax -
class derived-class(base-class):
    <class-suite>

\\ Example -
class Animal:
    def speak(self):
        print("Animal Speaking")
# child class Dog inherits base class Animal -
class Dog(Animal):
    def bark(self):
        print("dog barking")
d = Dog()
d.bark()
d.speak()

OUTPUT:
dog barking
Animal Speaking


\\ Types Of Inheritance :-

1) Multi-Level Inheritance :
class class1:
    <class-suite>
class class2(class1):
    <class suite>
class class3(class2):
    <class suite>

Example-
class Animal:
    def speak(self):
        print("Animal Speaking")
# child class Dog inherits base class Animal -
class Dog(Animal):
    def bark(self):
        print("dog barking")
# child class Dogchild inherits another child class Dog -
class DogChild(Dog):
    def eat(self):
        print("Eating bread...")
d = DogChild()
d.bark()
d.speak()
d.eat()

OUTPUT :
dog barking
Animal Speaking
Eating bread...


2) Multiple Inheritance :
class Base1:
    <class-suite>
class Base2:
    <class-suite>
class Derived(Base1, Base2):
    <class-suite>

Example -
class Calculation1:
    def Summation(self,a,b):
        return a+b;
class Calculation2:
    def Multiplication(self,a,b):
        return a*b;
class Derived(Calculation1,Calculation2):
    def Divide(self,a,b):
        return a/b;
d = Derived()
print(d.Summation(10,20))
print(d.Multiplication(10,20))
print(d.Divide(10,20))

OUTPUT :
30
200
0.5


# Methods :-

issubclass(sub,sup) :
used to check relationships between specified classes.
returns true if first class is subclass of second class else false

isinstance() :
used to check relationship between objects and classes.
returns true if first parameter (obj) is instance of second parameter (class).


\\ Example :-
class Calculation1:
    def Summation(self,a,b):
        return a+b;
class Calculation2:
    def Multiplication(self,a,b):
        return a*b;
class Derived(Calculation1,Calculation2):
    def Divide(self,a,b):
        return a/b;
d = Derived()

print(issubclass(Derived,Calculation2))
print(isinstance(d,Derived))

OUTPUT :
True
True


# Method Overriding :
When parent class method is defined in child class with some specific implementation,
then concept is called method overriding.
Method overriding is used in scenario where different definition of parent class method is needed in child class.

\\ Example -
class Bank:
    def getroi(self):
        return 10;
class SBI(Bank):
    def getroi(self):
        return 7;
class ICICI(Bank):
    def getroi(self):
        return 8;
        
b1 = Bank()
b2 = SBI()
b3 = ICICI()

print("Bank Rate of interest:",b1.getroi());
print("SBI Rate of interest:",b2.getroi());
print("ICICI Rate of interest:",b3.getroi());

OUTPUT:
Bank Rate of interest: 10
SBI Rate of interest: 7
ICICI Rate of interest: 8


------------


# Data Abstraction :-

\\ Syntax :
__atribute = value


\\ Example -
class Employee:
    __count = 0;
    def __init__(self):
        Employee.__count = Employee.__count+1
    def display(self):
        print("The number of employees",Employee.__count)
emp = Employee()
emp2 = Employee()
try:
    print(emp.__count)
finally:
    emp.display()


OUTPUT:
The number of employees 2
AttributeError: 'Employee' object has no attribute '__count'
